{"version":3,"sources":["components/Navbar.jsx","components/Homepage.jsx","components/Chat.jsx","components/Videoplayer.jsx","components/Broadcast.jsx","components/Broadcastform.jsx","components/404.jsx","components/Deleteform.jsx","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","Homepage","Chat","props","useState","msg","setMsg","useEffect","$","append","text","id","action","onSubmit","e","preventDefault","emitMsg","autocomplete","value","onChange","target","Videoplayer","socket","broadcast","setBroadcast","opts","height","width","playerVars","currentTime","containerClassName","onStateChange","event","data","window","location","reload","videoId","currentVideo","Broadcast","io","connect","emit","pathname","getBroadcast","slice","on","close","room","BroadcastForm","history","useHistory","title","description","tags","owner","isReversed","youtubePlaylists","newBroadcast","setNewBroadcast","handleChange","evt","name","a","fetch","method","headers","body","JSON","stringify","response","ok","json","broadcastObj","push","broadcastId","console","log","createBroadcast","alert","type","FourOFour","style","marginTop","DeleteForm","deleteBroadcast","App","broadcastUrl","setBroadcastUrl","exact","path","Broadcastform","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb3c8d08.chunk.js","sourcesContent":["\nimport '../styles/style.css';\n\nfunction Navbar () {\n\n  return (\n    <div className=\"navbar\">\n      Drivel.TV\n    </div>\n  )\n}\n\nexport default Navbar;","\nimport '../styles/style.css';\n\nfunction Homepage () {\n\n  return (\n    <div className=\"homepage\">\n      Homepage\n    </div>\n  )\n}\n\nexport default Homepage;","\nimport { useState, useEffect } from 'react';\nimport '../styles/style.css';\nimport $ from 'jquery';\n\n\nfunction Chat (props) {\n\n  const [msg, setMsg] = useState('');\n\n  // Appends new messages (from server -> Broadcast component) to list\n  useEffect(() => {\n    $('#chatList').append($('<li>').text(props.msg));\n  }, [props.msg]);\n\n\n  return (\n    <div className=\"chat\">\n      <ul id=\"chatList\"></ul>\n      <form id=\"chatForm\" action=\"\" onSubmit={ (e) => {\n        e.preventDefault(); // Prevent page reloading\n        if(msg === '') return; // Do not emit message if input is empty\n        props.emitMsg(msg); // Call emit function in Broadcast component\n        setMsg(''); // Clear input box\n      }}>\n        <input id=\"chatInput\" autocomplete=\"off\" value={msg} onChange={ (e) => setMsg(e.target.value)}/>\n        <button id=\"chatButton\">Send</button>\n      </form>\n    </div>\n  )\n}\n\nexport default Chat;","import { useState, useEffect } from 'react';\nimport '../styles/style.css';\nimport YouTube from 'react-youtube';\n\n\nfunction Videoplayer (props) {\n\n  const [broadcast, setBroadcast] = useState({});\n\n  // Set broadcast object as state\n  useEffect ( () => {\n    setBroadcast(props.broadcast);\n  }, [props.broadcast]);\n\n  // Function to reload page / get new video at end of current video\n  const reload = (event) => {\n    if (event.data === 0) window.location.reload();\n  };\n\n  //Define YouTube player options and assign start time from state\n  const opts = {\n    height: '100%',\n    width: '100%',\n    playerVars: {\n      'enablejsapi': 1,\n      'playsinline': 1,\n      'webkit-playsinline': 1,\n      'autoplay': 1,\n      'start': broadcast.currentTime,\n    },\n  }\n\n  return (\n    <YouTube containerClassName={'videoplayer'} onStateChange={reload} videoId={broadcast.currentVideo} opts={opts} />\n  )\n}\n\nexport default Videoplayer;","import { useState, useEffect } from 'react';\nimport '../styles/style.css';\nimport Chat from './Chat';\nimport Videoplayer from './Videoplayer';\n\nimport io from 'socket.io-client';\nlet socket;\n\n\nfunction Broadcast (props) {\n\n  const [msg, setMsg] = useState('');\n  const [broadcast, setBroadcast] = useState({});\n\n  useEffect ( () => {\n    //Connect to room-specific socket\n    socket = io.connect();\n    socket.emit('join', window.location.pathname);\n\n    //Get broadcast object for this room from backend server\n    props.getBroadcast(window.location.pathname.slice(3));\n\n    // Listens for new chat messages from server\n    socket.on('chat message to client', msg => {\n      setMsg(msg);\n    });\n\n    // On component unmount, close socket\n    return () => {\n      socket.close();\n    }\n  }, []);\n\n\n  useEffect ( () => {\n    // Store broadcast object as state when getting response from backend server\n    setBroadcast(props.broadcast);\n  }, [props.broadcast]);\n\n\n  // Sends new message (from groupchat) to server\n  const emitMsg = (msg) => {\n    socket.emit('chat message to server', {room: window.location.pathname, msg: msg});\n  };\n\n  return (\n    <div className=\"broadcast\">\n      <Videoplayer broadcast={broadcast}/>\n      <Chat emitMsg={emitMsg} msg={msg}/>\n    </div>\n  )\n}\n\nexport default Broadcast;","\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from 'react';\nimport '../styles/style.css';\n\nfunction BroadcastForm () {\n\n  // Import useHistory for redirect functionality\n  const history = useHistory();\n\n  // Creates new joined state for all input feilds\n  const [ newBroadcast, setNewBroadcast ] = useState({\n    title: '',\n    description: '',\n    tags: '',\n    owner: '',\n    isReversed: false,\n    youtubePlaylists: '',\n  });\n\n\n  // Function that saves the different inputs (by name attribute) to state\n  function handleChange(evt) {\n    const value = evt.target.value;\n    setNewBroadcast({\n      ...newBroadcast,\n      [evt.target.name]: value\n    });\n  }\n\n  // Function that saves checkbox input to state\n  function handleChangeCheckbox(evt) {\n    let value;\n    if (evt.target.value === 'false') value = true;\n    else value = false;\n    setNewBroadcast({\n      ...newBroadcast,\n      isReversed: value\n    });\n  };\n\n  // Function to log new broadcast\n  async function createBroadcast (broadcast) {\n    // Call backend API\n    try {\n      const response = await fetch('/api/create-broadcast', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(broadcast) // Stringify to JSON before posting\n      });\n      if (response.ok) { // If response is ok (200 range)\n        const broadcastObj = await response.json(); // Parse JSON response\n\n        // Redirect user to new broadcast page\n        history.push(`/b/${broadcastObj.broadcastId}`);\n\n      } else {\n        // Else if error, send to error page\n        history.push(`/404`);\n    };\n    } catch(err) {\n      console.log(err);\n    }\n  };\n\n  return <>\n\n          <div className=\"broadcastFormContainer\">\n          <h3>Create a new broadcast</h3>\n\n            <form onSubmit={(e) => {\n\n                  e.preventDefault(); /* Prevents reload of page on submit */\n\n                  // Form validation\n                  if (newBroadcast.title === '') {alert('Title required!'); return;}\n                  if (newBroadcast.owner === '') {alert('Owner field required!'); return;}\n                  if (newBroadcast.youtubePlaylists === '') {alert('You have not specefied any youtube playlists!'); return;}\n\n                  createBroadcast(newBroadcast); /* Postsbroadcast to backend through createEvent function */\n\n                  /* Clears inputs */\n                  setNewBroadcast({\n                    title: '',\n                    description: '',\n                    tags: '',\n                    owner: '',\n                    youtubePlaylists: '',\n                    isReversed: false,\n                  });\n              }}>\n                  <label>\n                    Broadcast name:<br></br>\n                    {/* Stores input in state onChange (everytime something is typed) */}\n                    <input name=\"title\" value={newBroadcast.title} onChange={handleChange} type=\"text\"/>\n                  </label>\n                  <br></br>\n                  <br></br>\n                  <label>\n                    Description:<br></br>\n                    {/* Stores input in state onChange (everytime something is typed) */}\n                    <input name=\"description\" value={newBroadcast.description} onChange={handleChange} type=\"text\"/>\n                  </label>\n                  <br></br>\n                  <br></br>\n                  <label>\n                    Tags:<br></br>\n                    {/* Stores input in state onChange (everytime something is typed) */}\n                    <input name=\"tags\" value={newBroadcast.tags} onChange={handleChange} type=\"text\"/>\n                  </label>\n                  <br></br>\n                  <br></br>\n                  <label>\n                    Owner:<br></br>\n                    {/* Stores input in state onChange (everytime something is typed) */}\n                    <input name=\"owner\" value={newBroadcast.owner} onChange={handleChange} type=\"text\"/>\n                  </label>\n                  <br></br>\n                  <br></br>\n                  <label>\n                    Playlists:<br></br>\n                    {/* Stores input in state onChange (everytime something is typed) */}\n                    <input name=\"youtubePlaylists\" value={newBroadcast.youtubePlaylists} onChange={handleChange} type=\"text\"/>\n                  </label>\n                  <br></br>\n                  <br></br>\n                  <label>\n                    Want to reverse the queue order of the playlists?&nbsp;&nbsp;&nbsp;\n                    {/* Stores input in state onChange (everytime something is typed) */}\n                    <input name=\"isReversed\"  value={newBroadcast.isReversed} onChange={handleChangeCheckbox} type=\"checkbox\"/>\n                  </label>\n                  <br></br>\n                  <br></br>\n\n                  <button type=\"submit\" value=\"Create\">Create Broadcast</button>\n\n            </form>\n\n          </div>\n\n\n\n        </>\n\n\n}\n\nexport default BroadcastForm;","\n\nfunction FourOFour () {\n\n  return (\n    <h4 style={{marginTop: '6vh'}}>404 - Page or Broadcast not found on server</h4>\n  )\n}\n\nexport default FourOFour;","\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from 'react';\nimport '../styles/style.css';\n\nfunction DeleteForm () {\n\n  // Import useHistory for redirect functionality\n  const history = useHistory();\n\n  // Creates state for delete field\n  const [ newBroadcast, setNewBroadcast ] = useState({\n    broadcastId: ''\n  });\n\n  // Function that saves inputs (by name attribute) to state\n  function handleChange(evt) {\n    const value = evt.target.value;\n    setNewBroadcast({\n      ...newBroadcast,\n      [evt.target.name]: value\n    });\n  }\n\n\n  // Function to log new broadcast\n  async function deleteBroadcast (broadcast) {\n    // Call backend API\n    try {\n      const response = await fetch('/api/delete-broadcast', {\n        method: 'DELETE',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(broadcast) // Stringify to JSON before posting\n      });\n      if (response.ok) { // If response is ok (200 range)\n        // Log delete message\n        console.log('Broadcast deleted!');\n      } else {\n        // Else if error, send to error page\n        history.push(`/404`);\n    };\n    } catch(err) {\n      console.log(err);\n    }\n  };\n\n  return <>\n\n          <div className=\"broadcastFormContainer\">\n          <h3>Delete broadcast</h3>\n\n            <form onSubmit={(e) => {\n\n                  e.preventDefault(); /* Prevents reload of page on submit */\n\n                  // Form validation\n                  if (newBroadcast.broadcastId === '') {alert('Broadcast id required!'); return;}\n\n                  deleteBroadcast(newBroadcast); /* Postsbroadcast to backend through createEvent function */\n\n                  /* Clears inputs */\n                  setNewBroadcast({\n                    broadcastId: ''\n                  });\n              }}>\n                  <label>\n                    Broadcast id:<br></br>\n                    {/* Stores input in state onChange (everytime something is typed) */}\n                    <input name=\"broadcastId\" value={newBroadcast.broadcastId} onChange={handleChange} type=\"text\"/>\n                  </label>\n\n                  <button type=\"submit\" value=\"Delete\">Delete Broadcast</button>\n\n            </form>\n\n          </div>\n\n\n\n        </>\n\n\n}\n\nexport default DeleteForm;","import {BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { useState } from 'react';\nimport './App.css';\n\nimport Navbar from './components/Navbar';\nimport Homepage from './components/Homepage';\nimport Broadcast from './components/Broadcast';\nimport Broadcastform from './components/Broadcastform';\nimport FourOFour from './components/404';\nimport DeleteForm from './components/Deleteform';\n\n\n\nfunction App() {\n\n  const [broadcast, setBroadcast] = useState({});\n  const [broadcastUrl, setBroadcastUrl] = useState('/b/:broadcast');\n\n\n  return (\n    <Router>\n      <Navbar/>\n      <Switch>\n        <Route exact path='/'> {/* If user visits root, redict to homepage */}\n          <Homepage/>\n        </Route>\n        <Route exact path=\"/create-broadcast\">\n          <Broadcastform/>\n        </Route>\n        <Route exact path=\"/delete-broadcast\">\n          <DeleteForm/>\n        </Route>\n        <Route exact path={broadcastUrl}> {/* If user visits broadcast page, check if broadcast exists in db - else, redirect to 404*/}\n          <Broadcast broadcast={broadcast} getBroadcast={getBroadcast}/>\n        </Route>\n        <Route exact path='/404'> {/* Specify 404 route */}\n          <FourOFour/>\n        </Route>\n        <Route path='/'> {/* If user visits any page not specified, redirect to 404 */}\n          <FourOFour/>\n        </Route>\n      </Switch>\n    </Router>\n  )\n\n\n\n  // Function to get broadcast from backend server\n  async function getBroadcast (id) {\n    // Call backend API\n    try {\n      const response = await fetch('/api/get-broadcast', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\"broadcastId\": id}) // Stringify to JSON before posting\n      });\n      if (response.ok) { // If response is ok (200 range)\n        const broadcastObj = await response.json(); // Parse JSON response\n        setBroadcast(broadcastObj); // Set broadcast object as state\n      } else { setBroadcastUrl('/');}; // Else if broadcast does not exist in DB, send user to 404\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}