{"version":3,"sources":["components/Navbar.jsx","components/Homepage.jsx","components/Chat.jsx","components/Videoplayer.jsx","components/Broadcast.jsx","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","Homepage","Chat","props","useState","msg","setMsg","useEffect","$","append","text","id","action","onSubmit","e","preventDefault","console","log","emitMsg","autocomplete","value","onChange","target","Videoplayer","socket","time","setTime","currentTime","opts","height","width","playerVars","containerClassName","videoId","Broadcast","setCurrentTime","io","connect","emit","window","location","pathname","room","close","on","App","exact","path","style","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wLAYeA,MATf,WAEE,OACE,qBAAKC,UAAU,SAAf,wBCMWC,MATf,WAEE,OACE,qBAAKD,UAAU,WAAf,uB,yBC2BWE,MA3Bf,SAAcC,GAAQ,IAAD,EAEGC,mBAAS,IAFZ,mBAEZC,EAFY,KAEPC,EAFO,KAUnB,OALAC,qBAAU,WACRC,IAAE,aAAaC,OAAOD,IAAE,QAAQE,KAAKP,EAAME,QAC1C,CAACF,EAAME,MAIR,sBAAKL,UAAU,OAAf,UACE,oBAAIW,GAAG,aACP,uBAAMA,GAAG,WAAWC,OAAO,GAAGC,SAAW,SAACC,GACxCA,EAAEC,iBACS,KAARV,IACHW,QAAQC,IAAI,QAASd,GACrBA,EAAMe,QAAQb,GACdC,EAAO,MALT,UAOE,uBAAOK,GAAG,YAAYQ,aAAa,MAAMC,MAAOf,EAAKgB,SAAW,SAACP,GAAD,OAAOR,EAAOQ,EAAEQ,OAAOF,UACvF,wBAAQT,GAAG,aAAX,yB,QCKOY,IC1BXC,ED0BWD,EA3Bf,SAAqBpB,GAAQ,IAAD,EAEFC,mBAAS,GAFP,mBAEnBqB,EAFmB,KAEbC,EAFa,KAK1BnB,qBAAY,WACVmB,EAAQvB,EAAMwB,eACb,CAACxB,EAAMwB,cAGV,IAAMC,EAAO,CACXC,OAAQ,OACRC,MAAO,OACPC,WAAY,CACV,YAAe,EACf,YAAe,EACf,qBAAsB,EACtB,SAAY,EACZ,MAASN,IAIb,OACE,cAAC,IAAD,CAASO,mBAAoB,cAAeC,QAAQ,cAAcL,KAAMA,K,iBCyB7DM,MA5Cf,WAAsB,IAAD,EAEG9B,mBAAS,IAFZ,mBAEZC,EAFY,KAEPC,EAFO,OAGmBF,mBAAS,GAH5B,mBAGZuB,EAHY,KAGCQ,EAHD,KAoCnB,OA9BA5B,qBAAY,WAOV,OALAiB,EAASY,IAAGC,WACLC,KAAK,OAAQC,OAAOC,SAASC,UAEpCjB,EAAOc,KAAK,mBAAoB,CAACI,KAAMH,OAAOC,SAASC,WAEhD,WACLjB,EAAOmB,WAER,IAGHpC,qBAAY,WAEViB,EAAOoB,GAAG,gBAAgB,SAAAnB,GACxBU,EAAeV,MAGjBD,EAAOoB,GAAG,0BAA0B,SAAAvC,GAClCC,EAAOD,QAER,IASD,sBAAKL,UAAU,YAAf,UACE,cAAC,EAAD,CAAa2B,YAAaA,IAC1B,cAAC,EAAD,CAAMT,QAPM,SAACb,GACfmB,EAAOc,KAAK,yBAA0B,CAACI,KAAMH,OAAOC,SAASC,SAAUpC,IAAKA,KAMlDA,IAAKA,QCtBpBwC,MAnBf,WACE,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,gBAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,oBAAIC,MAAO,CAACC,UAAW,OAAvB,0BCPKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.ca0de5bf.chunk.js","sourcesContent":["\nimport '../styles/style.css';\n\nfunction Navbar() {\n\n  return (\n    <div className=\"navbar\">\n      Drivel.TV\n    </div>\n  )\n}\n\nexport default Navbar;","\nimport '../styles/style.css';\n\nfunction Homepage() {\n\n  return (\n    <div className=\"homepage\">\n      Homepage\n    </div>\n  )\n}\n\nexport default Homepage;","\nimport { useState, useEffect } from 'react';\nimport '../styles/style.css';\nimport $ from 'jquery';\n\n\nfunction Chat(props) {\n\n  const [msg, setMsg] = useState('');\n\n  // Appends new messages (from server -> Broadcast component) to list\n  useEffect(() => {\n    $('#chatList').append($('<li>').text(props.msg));\n  }, [props.msg]);\n\n\n  return (\n    <div className=\"chat\">\n      <ul id=\"chatList\"></ul>\n      <form id=\"chatForm\" action=\"\" onSubmit={ (e) => {\n        e.preventDefault(); // Prevent page reloading\n        if(msg === '') return; // Do not emit message if input is empty\n        console.log('props', props);\n        props.emitMsg(msg); // Call emit function in Broadcast component\n        setMsg(''); // Clear input box\n      }}>\n        <input id=\"chatInput\" autocomplete=\"off\" value={msg} onChange={ (e) => setMsg(e.target.value)}/>\n        <button id=\"chatButton\">Send</button>\n      </form>\n    </div>\n  )\n}\n\nexport default Chat;","import { useState, useEffect } from 'react';\nimport '../styles/style.css';\nimport YouTube from 'react-youtube';\n\n\nfunction Videoplayer(props) {\n\n  const [time, setTime] = useState(0);\n\n  // When current timestamp comes in from props, set it as state\n  useEffect ( () => {\n    setTime(props.currentTime)\n  }, [props.currentTime]);\n\n  //Define YouTube player options and assign start time from state\n  const opts = {\n    height: '100%',\n    width: '100%',\n    playerVars: {\n      'enablejsapi': 1,\n      'playsinline': 1,\n      'webkit-playsinline': 1,\n      'autoplay': 1,\n      'start': time,\n    },\n  }\n\n  return (\n    <YouTube containerClassName={'videoplayer'} videoId='oOBJ-sIw4W8' opts={opts} />\n  )\n}\n\nexport default Videoplayer;","import { useState, useEffect } from 'react';\nimport '../styles/style.css';\nimport Chat from './Chat';\nimport Videoplayer from './Videoplayer';\n\nimport io from 'socket.io-client';\nlet socket;\n\n\nfunction Broadcast() {\n\n  const [msg, setMsg] = useState('');\n  const [currentTime, setCurrentTime] = useState(0);\n\n\n  useEffect ( () => {\n    //Connect to room-specific socket\n    socket = io.connect();\n    socket.emit('join', window.location.pathname);\n    //Get current timestamp for this room\n    socket.emit('get current time', {room: window.location.pathname});\n    // On component unmount, close socket\n    return () => {\n      socket.close();\n    }\n  }, []);\n\n\n  useEffect ( () => {\n    //Store incoming time update in state\n    socket.on('current time', time => {\n      setCurrentTime(time);\n    });\n    // Listens for new chat messages from server\n    socket.on('chat message to client', msg => {\n      setMsg(msg);\n    });\n  }, []);\n\n\n  // Sends new messages (from Chat) to server\n  const emitMsg = (msg) => {\n    socket.emit('chat message to server', {room: window.location.pathname, msg: msg});\n  };\n\n  return (\n    <div className=\"broadcast\">\n      <Videoplayer currentTime={currentTime}/>\n      <Chat emitMsg={emitMsg} msg={msg}/>\n    </div>\n  )\n}\n\nexport default Broadcast;","import {BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nimport Navbar from './components/Navbar';\nimport Homepage from './components/Homepage';\nimport Broadcast from './components/Broadcast';\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar/>\n      <Switch>\n        <Route exact path='/'>\n          <Homepage/>\n        </Route>\n        <Route exact path='/b/:broadcast'>\n          <Broadcast/>\n        </Route>\n        <Route path='/'>\n          <h1 style={{marginTop: '5vh'}}>404</h1>\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}