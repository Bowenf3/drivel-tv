{"version":3,"sources":["components/Navbar.jsx","components/Homepage.jsx","components/Chat.jsx","components/Videoplayer.jsx","components/Broadcast.jsx","components/404.jsx","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","Homepage","Chat","props","useState","msg","setMsg","useEffect","$","append","text","id","action","onSubmit","e","preventDefault","emitMsg","autocomplete","value","onChange","target","Videoplayer","socket","broadcast","setBroadcast","opts","height","width","playerVars","currentTime","containerClassName","videoId","currentVideo","Broadcast","io","connect","emit","window","location","pathname","on","close","getBroadcast","slice","room","FourOFour","style","marginTop","App","url","setUrl","a","fetch","method","headers","body","JSON","stringify","response","ok","json","broadcastObj","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2fa2ea76.chunk.js","sourcesContent":["\nimport '../styles/style.css';\n\nfunction Navbar () {\n\n  return (\n    <div className=\"navbar\">\n      Drivel.TV\n    </div>\n  )\n}\n\nexport default Navbar;","\nimport '../styles/style.css';\n\nfunction Homepage () {\n\n  return (\n    <div className=\"homepage\">\n      Homepage\n    </div>\n  )\n}\n\nexport default Homepage;","\nimport { useState, useEffect } from 'react';\nimport '../styles/style.css';\nimport $ from 'jquery';\n\n\nfunction Chat (props) {\n\n  const [msg, setMsg] = useState('');\n\n  // Appends new messages (from server -> Broadcast component) to list\n  useEffect(() => {\n    $('#chatList').append($('<li>').text(props.msg));\n  }, [props.msg]);\n\n\n  return (\n    <div className=\"chat\">\n      <ul id=\"chatList\"></ul>\n      <form id=\"chatForm\" action=\"\" onSubmit={ (e) => {\n        e.preventDefault(); // Prevent page reloading\n        if(msg === '') return; // Do not emit message if input is empty\n        props.emitMsg(msg); // Call emit function in Broadcast component\n        setMsg(''); // Clear input box\n      }}>\n        <input id=\"chatInput\" autocomplete=\"off\" value={msg} onChange={ (e) => setMsg(e.target.value)}/>\n        <button id=\"chatButton\">Send</button>\n      </form>\n    </div>\n  )\n}\n\nexport default Chat;","import { useState, useEffect } from 'react';\nimport '../styles/style.css';\nimport YouTube from 'react-youtube';\n\n\nfunction Videoplayer (props) {\n\n  const [broadcast, setBroadcast] = useState({});\n\n  // Set broadcast object as state\n  useEffect ( () => {\n    setBroadcast(props.broadcast);\n  }, [props.broadcast]);\n\n\n  //Define YouTube player options and assign start time from state\n  const opts = {\n    height: '100%',\n    width: '100%',\n    playerVars: {\n      'enablejsapi': 1,\n      'playsinline': 1,\n      'webkit-playsinline': 1,\n      'autoplay': 1,\n      'start': broadcast.currentTime,\n    },\n  }\n\n  return (\n    <YouTube containerClassName={'videoplayer'} videoId={broadcast.currentVideo} opts={opts} />\n  )\n}\n\nexport default Videoplayer;","import { useState, useEffect } from 'react';\nimport '../styles/style.css';\nimport Chat from './Chat';\nimport Videoplayer from './Videoplayer';\n\nimport io from 'socket.io-client';\nlet socket;\n\n\nfunction Broadcast (props) {\n\n  const [msg, setMsg] = useState('');\n  const [broadcast, setBroadcast] = useState({});\n\n  useEffect ( () => {\n    //Connect to room-specific socket\n    socket = io.connect();\n    socket.emit('join', window.location.pathname);\n\n    // Listens for new chat messages from server\n    socket.on('chat message to client', msg => {\n      setMsg(msg);\n    });\n\n    // On component unmount, close socket\n    return () => {\n      socket.close();\n    }\n  }, []);\n\n\n  useEffect ( () => {\n    //Get broadcast object for this room from backend server\n    props.getBroadcast(window.location.pathname.slice(3));\n  }, [props]);\n\n  useEffect ( () => {\n    // Store broadcast object as state when getting response from backend server\n    setBroadcast(props.broadcast);\n  }, [props.broadcast]);\n\n\n\n  // Sends new message (from groupchat) to server\n  const emitMsg = (msg) => {\n    socket.emit('chat message to server', {room: window.location.pathname, msg: msg});\n  };\n\n  return (\n    <div className=\"broadcast\">\n      <Videoplayer broadcast={broadcast}/>\n      <Chat emitMsg={emitMsg} msg={msg}/>\n    </div>\n  )\n}\n\nexport default Broadcast;","\n\nfunction FourOFour () {\n\n  return (\n    <h4 style={{marginTop: '6vh'}}>404 - Page or Broadcast not found on server</h4>\n  )\n}\n\nexport default FourOFour;","import {BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { useState } from 'react';\nimport './App.css';\n\nimport Navbar from './components/Navbar';\nimport Homepage from './components/Homepage';\nimport Broadcast from './components/Broadcast';\nimport FourOFour from './components/404';\n\n\n\nfunction App() {\n\n  const [broadcast, setBroadcast] = useState({});\n  const [url, setUrl] = useState('/b/:broadcast');\n\n  // Function to get broadcast from backend server\n  async function getBroadcast (id) {\n    // Call backend API\n    const response = await fetch('/api/get-broadcast', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\"broadcastId\": id}) // Stringify to JSON before posting\n    });\n    if (response.ok) { // If response is ok (200 range)\n      const broadcastObj = await response.json(); // Parse JSON response\n      setBroadcast(broadcastObj); // Set broadcast object as state\n    } else { setUrl('/'); }; // Else if broadcast does not exist in DB, send user to 404\n  };\n\n\n  return (\n    <Router>\n      <Navbar/>\n      <Switch>\n        <Route exact path='/'> {/* If user visits root, redict to homepage */}\n          <Homepage/>\n        </Route>\n        <Route exact path={url}> {/* If user visits broadcast page, check if broadcast exists in db */}\n          <Broadcast broadcast={broadcast} getBroadcast={getBroadcast}/>\n        </Route>\n        <Route path='/'> {/* If user visits any page not specified, redirect to 404 */}\n          <FourOFour/>\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}